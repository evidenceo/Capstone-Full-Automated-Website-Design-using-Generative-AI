# ELAA: An AI Web-design Website Application

## Overview
ELAA is an innovative web design application that leverages AI to streamline and enhance the website creation process.
It aims to provide a user-friendly platform where users can interactively design, customize, and deploy websites with
the assistance of AI-driven insights and modifications. Key features include template selection, AI-powered
customization for HTML, CSS, JavaScript, dynamic content generation, and a real-time preview of design changes.

## Getting Started

### Prerequisites
- Python 3.8 or later
- Flask
- Flask-SocketIO
- Flask-Login
- Flask-CORS
- SQLAlchemy
- Werkzeug
- OpenAI's GPT (for AI-driven functionalities)

### Installation
1. Clone the repository to your local machine.
2. Install the required Python packages using pip:
```bash
pip install flask flask-socketio flask-login flask-cors sqlalchemy werkzeug openai
```
3. Set up your OpenAI API key in a file named `APIKey.txt` at the root of your project directory.

### Configuration
- Configure the SQLite database URI in `main.py` if you wish to use a different database.
- Adjust CORS settings in `main.py` according to your deployment requirements.

### Running the Application
1. Navigate to the root of your project directory.
2. Run `python main.py` to start the Flask server.
3. Open a web browser and go to `http://127.0.0.1:5001` to access the ELAA application.
4. Run 'python init.db.py' to add the templates into the table.

## Usage

### Designing a Website
- **Select a Template:** Begin by selecting a website template from the available categories.
- **Customize:** Use the AI-driven chat interface to request customizations to HTML, CSS, and JavaScript.
- **Preview:** Dynamically preview your changes in real-time.
- **Deploy:** Once satisfied, deploy your website directly from the application.

### Examples and Use Cases
- **E-commerce Site:** Start with an e-commerce template and customize product listings, colors, and styles through
AI suggestions.
- **Portfolio Site:** Choose a portfolio template and instruct the AI to insert personal projects, adjust layouts, and
modify color schemes.

## API Reference

ELAA does not expose a traditional API but interacts internally through Socket.IO events for real-time communication
between the client and server.

### Key Socket.IO Events
- `start_conversation`: Initiates the conversation with the AI on the client side.
- `user_response`: Sends user responses to the server for processing and receiving further instructions or modifications.

## Architecture

### Database Schema
- **User:** Stores user credentials and information.
- **TemplateCategory, WebsiteTemplate, Page, TemplateImage:** Represent the structure for storing website templates and
their components.
- **UserTemplate, UserTemplatePage:** Store user-specific template selections and customizations.

### Service Architecture
- Utilizes Flask for the backend with Socket.IO for real-time web socket communication.
- AI-driven functionalities are powered by OpenAI's GPT models for generating and modifying web content.

### Third-party Services Integration
- **OpenAI:** Used for all AI-driven features, including content generation and template modification.

## Codebase Overview

### Directory Structure
- `models.py`: Defines the database models.
- `classes.py`: Contains the core logic for state management and flow control.
- `routes.py`, `template_routes.py`, `socketio_routes.py`: Define the application's routing logic.
- `chatbot_classes.py`: Implements the AI functionalities using OpenAI's API.
- `main.py`: Entry point of the application, setting up Flask and its configurations.
- `init_db.py`: Add templates into the database models.

### Key Modules
- **StateManager and FlowManager:** Handle the application's flow and state during user interactions.
- **ServiceLocator:** Provides a centralized registry for accessing application services like AI bots.

## Development and Contribution Guidelines

### Coding Standards
- Follow PEP 8 guidelines for Python code.
- Ensure code is well-commented and follows the application's architectural design.

### Testing Practices
- Write unit tests for new functionalities.
- Use Flask's testing tools for testing routes and user interactions.

### Pull Request Process
- Fork the repository and create your branch from `main`.
- If you've added code that should be tested, add tests.
- Ensure your code lints and adheres to the established coding conventions.
- Issue the pull request with a comprehensive description of changes.

